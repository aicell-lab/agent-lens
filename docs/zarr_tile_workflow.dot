digraph ZarrTileWorkflow {
    // Graph settings
    rankdir=TB;
    node [shape=box, style=filled, fillcolor=lightblue, fontsize=10, margin="0.2,0.1"];
    edge [fontsize=9];
    
    // Frontend components
    subgraph cluster_frontend {
        label="Frontend (MapDisplay.jsx)";
        style=filled;
        color=lightgrey;
        
        user [label="User Interaction", fillcolor=lightyellow];
        map_component [label="OpenLayers Map Component"];
        channel_selection [label="Channel Selection/Merge"];
        image_processing [label="Image Processing Settings\n(contrast, brightness, threshold)"];
        request_tile [label="Request Tile\n(dataset_id, timepoint, channel, z, x, y)"];
        render_tile [label="Render Base64 Image"];
        
        user -> channel_selection;
        user -> image_processing;
        channel_selection -> request_tile;
        image_processing -> request_tile;
        request_tile -> render_tile;
        render_tile -> map_component;
    }
    
    // Backend FastAPI endpoints
    subgraph cluster_fastapi {
        label="FastAPI Endpoints (register_frontend_service.py)";
        style=filled;
        color=lightgrey;
        
        tile_endpoint [label="/tile Endpoint"];
        merged_tiles_endpoint [label="/merged-tiles Endpoint"];
        timepoint_endpoint [label="/tile-for-timepoint Endpoint"];
        process_image [label="Process Tile Data\n(Apply contrast, brightness, etc.)"];
        encode_image [label="Convert to PNG & Base64 Encode"];
        
        tile_endpoint -> process_image;
        merged_tiles_endpoint -> process_image;
        timepoint_endpoint -> process_image;
        process_image -> encode_image;
    }
    
    // ZarrTileManager with background processing
    subgraph cluster_zarr_manager {
        label="ZarrTileManager (artifact_manager.py)";
        style=filled;
        color=lightgrey;
        
        get_tile_bytes [label="get_tile_bytes()"];
        get_tile_np_data [label="get_tile_np_data()"];
        get_zarr_group [label="get_zarr_group()"];
        zarr_cache [label="Zarr Group Cache\n(with URL expiry tracking)"];
        background_init [label="Background Initialization\n(_initialize_zarr_group_in_background())"];
        thread_pool [label="Thread Pool\n(For non-blocking operations)"];
        
        get_tile_bytes -> get_tile_np_data;
        get_tile_np_data -> get_zarr_group;
        get_zarr_group -> zarr_cache [label="Check cache first"];
        get_zarr_group -> background_init [label="Start if not cached"];
        background_init -> thread_pool [label="Run in thread pool"];
        background_init -> zarr_cache [label="Store result"];
    }
    
    // Artifact Manager with S3
    subgraph cluster_artifact_manager {
        label="ArtifactManager";
        style=filled;
        color=lightgrey;
        
        get_file [label="get_file()\nGet pre-signed S3 download URL"];
    }
    
    // S3 Storage layer
    subgraph cluster_s3 {
        label="S3 Storage";
        style=filled;
        color=lightyellow;
        
        s3_bucket [label="S3 Bucket\n(hypha-workspaces)"];
        presigned_url [label="Pre-signed URL\n(with 1-hour expiry)"];
        
        s3_bucket -> presigned_url;
    }
    
    // Zarr Storage with fsspec details
    subgraph cluster_zarr_storage {
        label="Zarr Storage";
        style=filled;
        color=lightgrey;
        
        fsstore [label="FSStore\n(zip::download_url)"];
        http_file [label="HTTP File Handler\n(Range requests)"];
        zip_index [label="Zip Central Directory\n(Downloaded first)"];
        zip_chunks [label="Zip File Chunks\n(Downloaded on demand)"];
        lru_cache [label="LRUStoreCache\n(256MB memory cache)"];
        zarr_group [label="zarr.group()"];
        zarr_array [label="scale{z}[y:y+tile_size, x:x+tile_size]"];
        
        fsstore -> http_file [label="fsspec chained protocol"];
        http_file -> zip_index [label="Get zip structure"];
        http_file -> zip_chunks [label="Range request for chunks"];
        fsstore -> lru_cache [label="Cache chunks"];
        lru_cache -> zarr_group;
        zarr_group -> zarr_array;
    }
    
    // Connect the clusters
    request_tile -> tile_endpoint [lhead=cluster_fastapi];
    encode_image -> render_tile;
    
    tile_endpoint -> get_tile_np_data;
    merged_tiles_endpoint -> get_tile_np_data;
    timepoint_endpoint -> get_tile_np_data;
    
    get_zarr_group -> get_file;
    get_file -> s3_bucket [label="Request presigned URL"];
    presigned_url -> fsstore [label="Use URL to access zip file"];
    
    // Key data flow explanation
    data_flow1 [shape=note, fillcolor=lightyellow, label="1. Frontend requests tile with\ndataset_id, timepoint, channel, z, x, y"];
    data_flow2 [shape=note, fillcolor=lightyellow, label="2. Endpoint constructs appropriate URL\nand processes image settings"];
    data_flow3 [shape=note, fillcolor=lightyellow, label="3. ZarrTileManager initializes Zarr in background\nand tracks URL expiration"];
    data_flow4 [shape=note, fillcolor=lightyellow, label="4. fsspec retrieves specific chunks via HTTP range requests:\n- First downloads zip central directory\n- Uses range requests for needed chunks only\n- Never downloads entire zip file"];
    data_flow5 [shape=note, fillcolor=lightyellow, label="5. Processed tile is returned as Base64 PNG\nwhile Zarr initialization continues in background"];
    
    data_flow1 -> request_tile [style=invis];
    data_flow2 -> tile_endpoint [style=invis];
    data_flow3 -> get_tile_np_data [style=invis];
    data_flow4 -> fsstore [style=invis];
    data_flow5 -> encode_image [style=invis];
} 