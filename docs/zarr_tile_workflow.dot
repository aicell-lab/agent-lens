digraph ZarrTileWorkflow {
    // Graph settings
    rankdir=TB;
    node [shape=box, style=filled, fillcolor=lightblue, fontsize=10, margin="0.2,0.1"];
    edge [fontsize=9];
    
    // Frontend components
    subgraph cluster_frontend {
        label="Frontend (MapDisplay.jsx)";
        style=filled;
        color=lightgrey;
        
        user_interaction [label="User Interaction
(Pan, Zoom, Select Channel/Dataset)", fillcolor=lightyellow];
        map_component [label="OpenLayers Map Component"];
        frontend_settings [label="Channel Selection / Image Processing Settings
(contrast, brightness, color, dataset_id, channel_name)"];
        tile_url_construction [label="Construct Tile URL
(e.g., /tile-for-timepoint with dataset_id, channel, z,x,y, processing_params)"];
        fetch_tile_request [label="Fetch Tile (Base64 PNG)
(PQueue for concurrent requests)"];
        render_tile [label="Render Base64 Image on Map"];
        
        user_interaction -> frontend_settings;
        frontend_settings -> tile_url_construction;
        map_component -> tile_url_construction [label="View change triggers requests"];
        tile_url_construction -> fetch_tile_request;
        fetch_tile_request -> render_tile;
        render_tile -> map_component;
    }
    
    // Backend FastAPI endpoints
    subgraph cluster_fastapi {
        label="FastAPI Endpoints (e.g., register_frontend_service.py)";
        style=filled;
        color=lightgrey;
        
        api_endpoint [label="API Endpoints
(/tile, /merged-tiles, /tile-for-timepoint)"];
        parse_request [label="Parse Request Parameters
(dataset_id, channel, z,x,y, processing_params)"];
        call_zarr_tile_manager [label="Call ZarrTileManager.get_tile_bytes()"];
        apply_image_processing [label="Apply Image Processing to NumPy Array
(contrast, brightness, color mapping)"];
        encode_to_png_base64 [label="Convert NumPy to PNG & Base64 Encode"];
        return_response [label="Return Base64 PNG String"];
        
        api_endpoint -> parse_request;
        parse_request -> call_zarr_tile_manager;
        call_zarr_tile_manager -> apply_image_processing [label="NumPy tile data"];
        apply_image_processing -> encode_to_png_base64;
        encode_to_png_base64 -> return_response;
    }
    
    // ZarrTileManager
    subgraph cluster_zarr_tile_manager {
        label="ZarrTileManager (artifact_manager.py)";
        style=filled;
        color=lightgrey;
        
        ztm_get_tile_bytes [label="get_tile_bytes()"];
        ztm_get_tile_np_data [label="get_tile_np_data()"];
        ztm_metadata_cache [label="Metadata Cache
(.zarray, .zgroup)"];
        ztm_processed_cache [label="Processed Tile Cache
(NumPy arrays)"];
        ztm_empty_cache [label="Empty Regions Cache"];
        ztm_fetch_metadata [label="_fetch_zarr_metadata()
(for .zarray)"];
        ztm_fetch_chunk [label="Fetch & Decompress Chunk via HTTP"];
        ztm_aiohttp_session [label="aiohttp.ClientSession"];
        
        ztm_get_tile_bytes -> ztm_get_tile_np_data;
        ztm_get_tile_np_data -> ztm_processed_cache [label="Check cache"];
        ztm_get_tile_np_data -> ztm_empty_cache [label="Check cache"];
        ztm_get_tile_np_data -> ztm_fetch_metadata [label="If not cached/invalid"];
        ztm_fetch_metadata -> ztm_metadata_cache [label="Check/Store"];
        ztm_get_tile_np_data -> ztm_fetch_chunk [label="If data needed"];
        ztm_fetch_chunk -> ztm_aiohttp_session;
        ztm_fetch_chunk -> ztm_processed_cache [label="Store result"];
        ztm_fetch_chunk -> ztm_empty_cache [label="Store if empty"];
    }
    
    // AgentLensArtifactManager (for metadata)
    subgraph cluster_agent_lens_artifact_manager {
        label="AgentLensArtifactManager (artifact_manager.py)";
        style=filled;
        color=lightgrey;
        
        alam_get_file [label="get_file()
(Used for .zarray, .zgroup metadata)"];
    }
    
    // Hypha Backend Services & S3
    subgraph cluster_hypha_s3 {
        label="Hypha Backend & S3 Storage";
        style=filled;
        color=lightyellow;
        
        hypha_service_metadata [label="Hypha Service
(Provides download URL for metadata files)"];
        hypha_service_chunk [label="Hypha HTTP Endpoint
(Serves specific chunk from a Zip file)"];
        s3_bucket [label="S3 Bucket
(e.g., hypha-workspaces, stores Zarr datasets as Zip files, metadata files)"];
        
        hypha_service_metadata -> s3_bucket [label="Accesses metadata file"];
        hypha_service_chunk -> s3_bucket [label="Accesses Zip file, extracts chunk"];
    }
    
    // Connections between components
    fetch_tile_request -> api_endpoint [lhead=cluster_fastapi, label="HTTP GET"];
    return_response -> fetch_tile_request [label="Base64 PNG"];
    
    call_zarr_tile_manager -> ztm_get_tile_bytes [lhead=cluster_zarr_tile_manager];
    
    ztm_fetch_metadata -> alam_get_file [lhead=cluster_agent_lens_artifact_manager];
    alam_get_file -> hypha_service_metadata [lhead=cluster_hypha_s3, label="Request metadata file URL"];
    
    ztm_aiohttp_session -> hypha_service_chunk [lhead=cluster_hypha_s3, label="HTTP GET chunk URL
(e.g., .../zip-files/.../{y}.zip?path={x})"];
    
    // Notes explaining key parts of the workflow
    note_intro [shape=note, fillcolor=lightyellow, label="Workflow for Zarr-based tile rendering with direct Hypha chunk access."];
    
    note_frontend_request [shape=note, fillcolor=lightyellow, label="1. Frontend constructs a URL for a tile, including dataset alias (timepoint),
channel, zoom level (z), tile coordinates (x,y), and image processing parameters.
It sends this request to a FastAPI endpoint."];
    note_frontend_request -> tile_url_construction [style=invis];

    note_fastapi_handling [shape=note, fillcolor=lightyellow, label="2. FastAPI endpoint receives the request, parses parameters,
 and calls ZarrTileManager.get_tile_bytes()."];
    note_fastapi_handling -> api_endpoint [style=invis];

    note_ztm_metadata [shape=note, fillcolor=lightyellow, label="3. ZarrTileManager._fetch_zarr_metadata() (if needed) uses
AgentLensArtifactManager.get_file() to fetch .zarray metadata.
This involves Hypha providing a URL to the metadata file in S3."];
    note_ztm_metadata -> ztm_fetch_metadata [style=invis];
    
    note_ztm_chunk_fetch [shape=note, fillcolor=lightyellow, label="4. ZarrTileManager.get_tile_np_data() then constructs a direct HTTP URL
 to a Hypha endpoint that serves the specific compressed chunk from a larger
 Zip file (e.g., /.../zip-files/{channel}/scale{s}/{y}.zip?path={x}).
 It uses aiohttp to fetch this chunk."];
    note_ztm_chunk_fetch -> ztm_fetch_chunk [style=invis];

    note_ztm_processing_cache [shape=note, fillcolor=lightyellow, label="5. The fetched chunk is decompressed (e.g., using numcodecs).
The resulting NumPy array is cached (processed_tile_cache) or marked as empty
(empty_regions_cache). The NumPy array is returned to FastAPI."];
    note_ztm_processing_cache -> ztm_get_tile_np_data [style=invis];

    note_fastapi_image_gen [shape=note, fillcolor=lightyellow, label="6. FastAPI applies image processing (contrast, brightness, color mapping)
 to the NumPy array, converts it to a PNG image, and Base64 encodes it."];
    note_fastapi_image_gen -> apply_image_processing [style=invis];

    note_frontend_render [shape=note, fillcolor=lightyellow, label="7. Frontend receives the Base64 PNG string and renders it on the map."];
    note_frontend_render -> render_tile [style=invis];
} 