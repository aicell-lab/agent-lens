name: Run Tests

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test-step-by-step:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
    
    - name: Cache node modules
      uses: actions/cache@v3
      with:
        path: ~/.npm
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install Python dependencies
      run: |
        pip install --upgrade pip
        pip install -r requirements_test.txt
        pip install -e .
        
    - name: Verify package installation
      run: |
        python -c "import agent_lens; print('agent_lens package installed successfully')"
    
    - name: Install Playwright browsers
      run: |
        playwright install chromium
    
    - name: Install frontend dependencies
      run: |
        cd frontend && npm install
    
    - name: Check test dependencies
      run: |
        python scripts/run_tests.py --check-deps
    
    - name: Step 1 - Run backend unit tests
      env:
        WORKSPACE_TOKEN: ${{ secrets.WORKSPACE_TOKEN }}
      run: |
        echo "üß™ Running backend unit tests..."
        python scripts/run_tests.py --backend-only --type unit --verbose
    
    - name: Step 2 - Run backend fast tests (non-slow)
      env:
        WORKSPACE_TOKEN: ${{ secrets.WORKSPACE_TOKEN }}
      run: |
        echo "‚ö° Running backend fast tests..."
        python scripts/run_tests.py --backend-only --type fast --verbose
    
    - name: Step 3 - Run frontend React tests
      run: |
        echo "‚öõÔ∏è Running frontend React tests..."
        cd frontend && npm test -- --coverage --watchAll=false
    
    - name: Step 4 - Run frontend service tests (Playwright)
      env:
        WORKSPACE_TOKEN: ${{ secrets.WORKSPACE_TOKEN }}
      run: |
        echo "üé≠ Running frontend service tests with Playwright..."
        python scripts/run_frontend_tests.py
    
    - name: Step 5 - Run backend integration tests (if token available)
      env:
        WORKSPACE_TOKEN: ${{ secrets.WORKSPACE_TOKEN }}
      run: |
        echo "üîó Running backend integration tests..."
        if [ -n "$WORKSPACE_TOKEN" ]; then
          python scripts/run_tests.py --backend-only --type integration --verbose
        else
          echo "‚ö†Ô∏è Skipping integration tests - WORKSPACE_TOKEN not available"
        fi
      continue-on-error: true
    
    - name: Generate test coverage report
      env:
        WORKSPACE_TOKEN: ${{ secrets.WORKSPACE_TOKEN }}
      run: |
        echo "üìä Generating coverage report..."
        python scripts/run_tests.py --backend-only --type fast --coverage
    
    - name: Upload backend coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: backend-tests
        name: codecov-backend
        fail_ci_if_error: false
    
    - name: Upload frontend coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./frontend/coverage/lcov.info
        flags: frontend-tests
        name: codecov-frontend
        fail_ci_if_error: false