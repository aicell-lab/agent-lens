[build-system]
requires = ["setuptools>=64", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "agent-lens"
version = "0.1.0"
description = "AI-powered smart microscopy web application with autonomous control of microscopy hardware"
readme = "README.md"
requires-python = ">=3.11"
license = { text = "MIT" }
authors = [
    { name = "AiCell Lab", email = "contact@aicell.io" }
]
keywords = ["microscopy", "ai", "automation", "imaging", "scientific-software"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Bio-Informatics",
    "Topic :: Scientific/Engineering :: Image Processing",
]
dependencies = [
    # Core dependencies
    "hypha_rpc==0.20.81",
    "numpy==2.1.3",
    "pillow==11.0.0",
    "httpx==0.28.1",
    "python-dotenv==1.0.1",
    "fastapi==0.106.0",
    "python-multipart==0.0.6",
    "aiobotocore==2.19.0",
    "requests==2.32.3",
    
    # Artifact manager and data processing
    "numcodecs==0.13.1",
    "blosc==1.11.2",
    "aiohttp==3.11.14",
    "scikit-image==0.25.2",
    "zarr==2.15.0",
    
    # AI and machine learning
    "torch==2.5.1+cpu",
    "clip @ git+https://github.com/openai/CLIP.git",
]

[project.optional-dependencies]
test = [
    # Testing framework
    "pytest==8.2.2",
    "pytest-asyncio==0.23.7",
    "pytest-mock==3.12.0",
    "pytest-cov==4.0.0",
    "pytest-xdist==3.5.0",
    "pytest-timeout>=2.1.0",
    
    # Test utilities
    "aioresponses==0.7.6",
    "factory-boy==3.3.0",
    "httpx>=0.25.0",
    "python-multipart>=0.0.6",
    
    # Frontend service testing
    "playwright>=1.40.0",
]

dev = [
    "agent-lens[test]",
    # Add development tools here if needed
    # "black",
    # "flake8",
    # "mypy",
]

[project.urls]
homepage = "https://github.com/aicell-lab/agent-lens"
repository = "https://github.com/aicell-lab/agent-lens"

[tool.setuptools.packages.find]
include = ["agent_lens*"]

[tool.setuptools.package-data]
"agent_lens" = ["*.txt", "*.md"]

[tool.pytest.ini_options]
minversion = "6.0"
addopts = [
    "-ra", 
    "--tb=short", 
    "--strict-markers", 
    "--strict-config",
    "--timeout=120"
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
asyncio_mode = "auto"
log_cli = true
log_cli_level = "INFO"
log_cli_format = "%(asctime)s [%(levelname)8s] %(name)s: %(message)s"
log_cli_date_format = "%Y-%m-%d %H:%M:%S"
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning", 
    "ignore::RuntimeWarning",
    "ignore:.*Task was destroyed but it is pending.*:RuntimeWarning",
    "ignore:.*coroutine.*was never awaited.*:RuntimeWarning",
    "ignore:.*The event_loop fixture provided by pytest-asyncio has been redefined.*:DeprecationWarning",
    "ignore:.*async def functions are not natively supported.*:pytest.PytestUnhandledCoroutineWarning",
    "ignore:.*deprecated.*:DeprecationWarning",
    "ignore:.*PytestUnraisableExceptionWarning.*"
]
markers = [
    "unit: Unit tests",
    "integration: Integration tests", 
    "slow: Slow tests with AI models",
    "frontend: Frontend service tests",
    "hardware: marks tests that require hardware access",
]

[tool.coverage.run]
source = ["agent_lens"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/env/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]